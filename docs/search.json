[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I love maps, rocks and chocolates. I’m from Singapore, where I did my undergraduate degree in Earth Science. I have three years of research experience in GIS, remote sensing, hydrology, and geomorphology.  With an interest in languages, I’m fluent in English, Chinese, and Japanese.",
    "crumbs": [
      "About Me"
    ]
  },
  {
    "objectID": "about.html#hi-im-wei-jing",
    "href": "about.html#hi-im-wei-jing",
    "title": "About Me",
    "section": "",
    "text": "I love maps, rocks and chocolates. I’m from Singapore, where I did my undergraduate degree in Earth Science. I have three years of research experience in GIS, remote sensing, hydrology, and geomorphology.  With an interest in languages, I’m fluent in English, Chinese, and Japanese.",
    "crumbs": [
      "About Me"
    ]
  },
  {
    "objectID": "analysis/2-Wetland.html",
    "href": "analysis/2-Wetland.html",
    "title": "Wetland Extent",
    "section": "",
    "text": "Wetland extent was obtained from the Oakland Ridge National Laboratory Distributed Active Archive Centre (Hess et al., 2015). The raster was cropped to the floodplain along the Amazon River and resampled to the inundation frequency raster’s resolution.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport rasterio as rio\n\n# Import wetland extent\nwetland = rio.open(\"../data/wetland_nearest.tif\")\n\n# Read into a NumPy array (only 1 band)\nwetland_np = wetland.read(1)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 4))\nimg = ax.imshow(wetland_np)\n\n# Set background to beige\nfig.patch.set_facecolor(\"#F9F8F2\")\nax.set_facecolor(\"#F9F8F2\")\n\n# Create an inset axes for the colorbar in the bottom right\ncax = ax.inset_axes([0.8, 0.15, 0.15, 0.03])  # [x, y, width, height]\n\n# Colorbar\ncbar = fig.colorbar(img, cax=cax, orientation='horizontal', shrink=0.3)\ncbar.ax.set_title(\"Wetland extent\", fontsize=10, pad=4, color='white') # title\ncbar.outline.set_linewidth(0)                                  # remove black outline\ncbar.ax.tick_params(size=0)                                    # remove ticks\ncbar.ax.xaxis.set_tick_params(pad=4, colors='white')           # tick labels\n\n# Remove axes for clean aesthetics\nax.axis(\"off\")\n\n\n\n\n\n\n\n\nFigure 1: Wetland extent",
    "crumbs": [
      "Analysis",
      "Wetland Extent"
    ]
  },
  {
    "objectID": "analysis/1-IF.html",
    "href": "analysis/1-IF.html",
    "title": "Inundation frequency",
    "section": "",
    "text": "Inundation frequency was obtained from the Global Surface Water Explorer Portal (Pekel et al., 2016). The water occurence tiles of 60W and 70W were merged and cropped to along the Amazon River.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport rasterio as rio\n\n# Import IF cropped\nIF_crop = rio.open(\"../data/IF_crop.tif\")\n\n# Read into a NumPy array (only 1 band)\nIF_crop_np = IF_crop.read(1)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 4))\nimg = ax.imshow(IF_crop_np)\n\n# Set background to beige\nfig.patch.set_facecolor(\"#F9F8F2\")\nax.set_facecolor(\"#F9F8F2\")\n\n# Create an inset axes for the colorbar in the bottom right\ncax = ax.inset_axes([0.8, 0.15, 0.15, 0.03])  # [x, y, width, height]\n\n# Colorbar\ncbar = fig.colorbar(img, cax=cax, orientation='horizontal', shrink=0.3)\ncbar.ax.set_title(\"IF (%)\", fontsize=10, pad=4, color='white') # title\ncbar.outline.set_linewidth(0)                                  # remove black outline\ncbar.ax.tick_params(size=0)                                    # remove ticks\ncbar.ax.xaxis.set_tick_params(pad=4, colors='white')           # tick labels\n\n# Remove axes for clean aesthetics\nax.axis(\"off\")\n\n\n\n\n\n\n\n\nFigure 1: Inundation frequency",
    "crumbs": [
      "Analysis",
      "Inundation frequency"
    ]
  },
  {
    "objectID": "analysis/3-Bathymetry.html",
    "href": "analysis/3-Bathymetry.html",
    "title": "Bathymetry",
    "section": "",
    "text": "Bathymetry was calculated using the IF raster and the IF-depth model.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport rasterio as rio\nimport geopandas as gpd\n\n# Import bathymetry\nbathymetry = rio.open(\"../data/bathymetry.tif\")\n\n# Read into a NumPy array (only 1 band)\nbathymetry_np = bathymetry.read(1)\n\n# Open hydropoly shapefile\nhydropoly_crop = gpd.read_file(\"../data/Hydropoly/hydropoly_crop.shp\")\n\n# Ensure same crs\nhydropoly_crop = hydropoly_crop.to_crs(epsg=bathymetry.crs.to_epsg())\n\n# Get the bounds of bathymetry\nminx, miny, maxx, maxy = bathymetry.bounds;  # (left, bottom, right, top)\n\n# Define color breaks\nbreaks2 = [0.0008,\n 3.4,\n 5.2,\n 6.1,\n 6.900649783627833];\n\n# Define palette\namazon_palette = [\"#F1A790\",\"#DD6F78\",\"#BF6476\",\"#8E6781\"];\ncmap = mcolors.LinearSegmentedColormap.from_list('custom_cmap', list(zip(np.linspace(0, 1, len(amazon_palette)), amazon_palette)));\nnorm = mcolors.BoundaryNorm(breaks2, cmap.N);\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 4))\nimg = ax.imshow(bathymetry_np,cmap=cmap, extent=[minx, maxx, miny, maxy],norm=norm);\n\n# Add the river polygon\nhydropoly_crop.plot(ax=ax, facecolor=\"#355B7C\", edgecolor=\"none\",zorder=2)\n\n# Set background to beige\nfig.patch.set_facecolor(\"#F9F8F2\")\nax.set_facecolor(\"#F9F8F2\")\n\n# Create an inset axes for the colorbar in the bottom right\ncax = ax.inset_axes([0.8, 0.05, 0.15, 0.03])  # [x, y, width, height]\n\n# Colorbar\ncbar = fig.colorbar(img, cax=cax, orientation='horizontal', shrink=0.3)\ncbar.ax.set_title(\"Depth (m)\", fontsize=10, pad=4) # Title\ncbar.outline.set_linewidth(0) # Remove the black outline\ncbar.ax.tick_params(size=0) # Remove ticks\n# cbar.set_ticklabels(['0','','','','7']) # Custom tick labels\ncbar.ax.xaxis.set_tick_params(pad=4) # Tick labels\n\n# Remove axes for clean aesthetics\nax.axis(\"off\")\n\n\n\n\n\n\n\n(-60.86754719044736,\n -52.78150900060542,\n -4.322904641248208,\n -1.6190025337876408)\n\n\n(a) Bathymetry\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigure 1",
    "crumbs": [
      "Analysis",
      "Bathymetry"
    ]
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nCurrent methods on measuring depth (bathymetry) includes surveys that use an echo sounder attached to a boat. However, such surveys require much time, money, and manpower, hence are usually restricted to a small scale. To determine bathymetry on a larger scale, remote sensing is adopted, but many techniques are based on how light reflects off the water surface, which is less accurate when measuring cloudy water bodies like the Amazon lakes.\nConsidering the limitations of both methods, this project uses a new method involving flooding/ inundation frequency (IF), in other words, how often a certain part of a floodplain is flooded. As deeper parts of the floodplain would be flooded more, an IF-depth model can be used. This model is based on one of the floodplains called Curuai, which has been surveyed by a team of researchers, and is applied to the rest of the study area.",
    "crumbs": [
      "Analysis"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Mapping the Amazon River",
    "section": "Introduction",
    "text": "Introduction\nThe middle-lower Amazon River has a complex morphology, where seasonal flooding has formed large floodplain lakes along the riverbanks. The lakes regulate river flow, store nutrient-rich sediments and are home to diverse species. In this project, the depth of 12 lakes along the Amazon River were estimated using flooding frequency, where areas that flood more are expected to be deeper. Depth data is useful for research in ecology and hydrology, such as in determining biodiversity distribution and modelling water stratification.",
    "crumbs": [
      "Introduction"
    ]
  }
]